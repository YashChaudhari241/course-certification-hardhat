{
  "language": "Solidity",
  "sources": {
    "contracts/Certify.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Certify {\n    address immutable i_owner;\n    mapping(address => uint8) public authorities; // used to store authorities\n    mapping(address => uint8) public issuers; // used to store authorities\n    mapping(address => Certificate[]) certificates;\n    error Certify__OutOfIndex();\n    struct Certificate {\n        string id;\n        address issuedTo;\n        address issuedBy;\n        uint issuedAt;\n        bool isRevoked;\n        string encryptedData;\n    }\n\n    constructor(address owner) {\n        i_owner = owner;\n        authorities[owner] = 1;\n    }\n\n    modifier onlyAuthorities() {\n        require(\n            authorities[msg.sender] == 1 || msg.sender == i_owner,\n            \"Not an Authority\"\n        );\n        _;\n    }\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"Only owners can call this function\");\n        _;\n    }\n    modifier onlyIssuer() {\n        require(\n            issuers[msg.sender] == 1,\n            \"Only issuers can call this function\"\n        );\n        _;\n    }\n\n    function addAuthority(address newAuthority) external onlyAuthorities {\n        authorities[newAuthority] = 1;\n    }\n\n    function removeAuthority(address existingAuthority) external onlyOwner {\n        authorities[existingAuthority] = 0;\n    }\n\n    function addIssuer(address newIssuer) external onlyAuthorities {\n        issuers[newIssuer] = 1;\n    }\n\n    function removeIssuer(address existingIssuer) external onlyAuthorities {\n        issuers[existingIssuer] = 0;\n    }\n\n    function issueCertificate(Certificate memory newCert) external onlyIssuer {\n        newCert.issuedAt = block.timestamp;\n        newCert.issuedBy = msg.sender;\n        certificates[newCert.issuedTo].push(newCert);\n    }\n\n    function revokeCertificate(address user, uint index) external onlyIssuer {\n        if (certificates[user].length <= index) {\n            revert Certify__OutOfIndex();\n        }\n        certificates[user][index].isRevoked = true;\n    }\n\n    function getAuthorityStatus() external view returns (uint) {\n        return authorities[msg.sender];\n    }\n\n    function getAllCertificates(\n        address user\n    ) external view returns (Certificate[] memory) {\n        return certificates[user];\n    }\n\n    function getCertificate(\n        address user,\n        uint index\n    ) external view returns (Certificate memory) {\n        if (certificates[user].length <= index) {\n            revert Certify__OutOfIndex();\n        }\n        return certificates[user][index];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}